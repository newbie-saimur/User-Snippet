<snippet>
	<content><![CDATA[
using Mat = vector<vector<int>>;
const int mod = 1e9;

Mat multiply (Mat &a, Mat &b) {
    int sz = a.size();
    Mat res(sz, vector<int>(sz, 0));
    for (int i = 0; i < sz; i++) {
        for (int j = 0; j < sz; j++) {
            for (int k = 0; k < sz; k++) {
                res[i][j] = (res[i][j] + 1LL * a[i][k] * b[k][j]) % mod;
            }
        }
    }
    return res;
}

Mat matexpo(Mat &T, int n) {
    int sz = T.size();
    Mat res(sz, vector<int>(sz, 0));
    for (int i = 0; i < sz; i++) res[i][i] = 1;
    while (n) {
        if (n & 1) res = multiply(res, T);
        T = multiply(T, T); n >>= 1;
    }
    return res;
}

int nth_num(int nth, int known_term, vector<int> &base_mat) {
    Mat T(known_term, vector<int>(known_term));
    // Insert Magic Matrix
    if (nth <= known_term) return base_mat[nth - 1];
    T = matexpo(T, nth - known_term);
    int ans = 0;
    for (int i = 0, j = known_term - 1; i < known_term; i++, j--) {
        ans = (ans + 1LL * base_mat[j] * T[0][i]) % mod;
    }
    return ans;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mat_expo</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
