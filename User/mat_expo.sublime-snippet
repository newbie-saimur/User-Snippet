<snippet>
	<content><![CDATA[
const int mod = 1e9 + 7;

struct Mat {
    int sz;
    vector<vector<int>> mat;
    Mat(int sz) {
        this->sz = sz;
        mat.resize(sz, vector<int>(sz, 0));
    }
    void identity_matrix(bool flag = 0) {
        for (int i = 0; i < (flag ? sz - 1 : sz); i++) {
            if (!flag) mat[i][i] = 1;
            else mat[i][i + 1] = 1;
        }
    }
    Mat operator* (Mat a) {
        Mat res(sz);
        for (int i = 0; i < sz; i++) {
            for (int j = 0; j < sz; j++) {
                for (int k = 0; k < sz; k++) {
                    res.mat[i][j] = (res.mat[i][j] + mat[i][k] * 1LL * a.mat[k][j]) % mod;
                }
            }
        }
        return res;
    }
};

Mat matExpo(Mat a, int n) {
    Mat res(a.sz);
    res.identity_matrix();
    while (n) {
        if (n & 1) res = res * a;
        a = a * a;
        n >>= 1;
    }
    return res;
}

int nth_term(int nth, int known_term, vector<int> &base_mat, vector<int> &coefficient_mat) {
    Mat T(known_term);
    for (int i = 0; i < known_term; i++) T.mat[i][0] = coefficient_mat[i];
    T.identity_matrix(1);
    if (nth <= known_term) return base_mat[nth - 1];
    T = matExpo(T, nth - known_term);
    int ans = 0;
    for (int i = 0, j = known_term - 1; i < known_term; i++, j--) {
        ans = (ans + 1LL * base_mat[j] * T.mat[i][0]) % mod;
    }
    return ans;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mat_expo</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
