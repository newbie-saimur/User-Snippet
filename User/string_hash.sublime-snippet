const int N = 1e6 + 5;
const int MOD = 1e9 + 7;
const ll base[] = {97, 1000003};

ll bigMod (ll a, ll e) {
    if (e == -1) e = MOD - 2;
    ll ret = 1;
    while (e) {
        if (e & 1) ret = ret * a % MOD;
        a = a * a % MOD, e >>= 1;
    }
    return ret;
}

ll pwr[2][N], inv_pwr[2][N]; // {base, index_pos}

void initHash() {
    for (int it = 0; it < 2; ++it) {
        pwr[it][0] = inv_pwr[it][0] = 1;
        ll INV_P = bigMod(base[it], -1);
        for (int i = 1; i < N; ++i) {
            pwr[it][i] = pwr[it][i - 1] * base[it] % MOD;
            inv_pwr[it][i] = inv_pwr[it][i - 1] * INV_P % MOD;
        }
    }
}

struct RangeHash {
    vector <ll> hs[2], rev[2];

    RangeHash (const string S, bool revFlag = 0) {
        for (int it = 0; it < 2; ++it) {
            hs[it].resize(S.size() + 1, 0);
            for (int i = 0; i < S.size(); ++i) {
                hs[it][i + 1] = (hs[it][i] + pwr[it][i + 1] * (S[i] - 'a' + 1)) % MOD;
            }
            if (revFlag) {
                rev[it].resize(S.size() + 1, 0);
                for (int i = 0; i < S.size(); ++i) {
                    rev[it][i + 1] = (rev[it][i] + inv_pwr[it][i + 1] * (S[i] - 'a' + 1)) % MOD;
                }
            }
        }
    }

    inline ll get (int l, int r) {
        ll one = (hs[0][r + 1] - hs[0][l]) * inv_pwr[0][l + 1] % MOD;
        ll two = (hs[1][r + 1] - hs[1][l]) * inv_pwr[1][l + 1] % MOD;
        if (one < 0) one += MOD; if (two < 0) two += MOD;
        return one << 31 | two;
    }

    inline ll getReverse (int l, int r) {
        ll one = (rev[0][r + 1] - rev[0][l]) * pwr[0][r + 1] % MOD;
        ll two = (rev[1][r + 1] - rev[1][l]) * pwr[1][r + 1] % MOD;
        if (one < 0) one += MOD; if (two < 0) two += MOD;
        return one << 31 | two;
    }
};

void solve() {
    initHash();
    string S; cin >> S;
    RangeHash machine(S);
    cout << machine.get(0, S.size() - 1) << '\n';
}
