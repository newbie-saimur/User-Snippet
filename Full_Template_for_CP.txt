#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// #include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
// using namespace __gnu_pbds;

#define debug(x) cerr << #x<<" : "; cerr<<x<<" "; cerr << endl;

#define int     long long
#define ull     unsigned long long
#define vi      vector<int>
#define pii     pair<int,int>
#define vip     vector<pair<int,int>>
#define umap    unordered_map
#define uset    unordered_set
#define pb      push_back
#define pf      push_front
#define ff      first
#define ss      second
#define in      insert
#define ub      upper_bound
#define lb      lower_bound

#define all(v)      v.begin(), v.end()
#define eps         (double)(1e-7)
#define pi          (double)(acos(-1))
#define fl(i,n)     for(int i=0;i<n;i++)
#define rl(i,m,n)   for(int i=n;i>=m;i--)
#define gcd(a,b)    __gcd(a, b)
#define lcm(a,b)    (a * b) / __gcd(a, b)
#define mod         (int)(1e9+7)

#define setbit(n)      __builtin_popcountll(n)  // Count of set bit
#define zerobit(n)     __builtin_ctzll(n)       // Count of 0 bit before 1st 1
#define getbit(n,i)    ((n & (1LL << i)) != 0)  // nth bit ?
#define clearlsb(n,i)  (n & (~((1<<(i+1))-1)))  // unset upto ith bit rtl
#define clearmsb(n,i)  (n & ((1<<(i+1))-1))     // unset before ith bit ltr
#define setbit0(n,i)   (n & (~(1LL << i)))      // unset any bit
#define setbit1(n,i)   (n | (1LL << i))         // set any bit
#define togglebit(n,i) (n ^ (1LL << i))

#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))

#define case     cout<<"Case "<<_<<": "
#define yes      cout<<"YES\n"
#define no       cout<<"NO\n"
#define sp(x,y)  fixed<<setprecision(y)<<x
#define endl     "\n"
int _;

// template<class T> using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; 
// template<class T> using o_mset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>; 
// s.order_of_key(x) = number of elements strictly less than x
// *s.find_by_order(i) = ith element in set (0 index)
int binExp(int a,int b,int M){int res=1;while(b){if(b&1) res=(res*1LL*a)%M;a=(a*1LL*a)%M;b>>=1;}return res;}

// Operator overloads
template<typename T1, typename T2>      // cin >> pair<T1, T2>
istream& operator>>(istream &istream, pair<T1, T2> &p) { return (istream >> p.first >> p.second); }
template<typename T>                    // cin >> vector<T>
istream& operator>>(istream &istream, vector<T> &v){for (auto &it : v)cin >> it;return istream;}
template<typename T1, typename T2>      // cout << pair<T1, T2>
ostream& operator<<(ostream &ostream, const pair<T1, T2> &p) { return (ostream << p.first << " " << p.second <<"\n"); }
template<typename T>                    // cout << vector<T>
ostream& operator<<(ostream &ostream, const vector<T> &c) { for (auto &it : c) cout << it << " "; return ostream; }
void readarr(int arr[],int n){fl(i,n) cin>>arr[i];}
void printarr(int arr[], int n){fl(i,n) cout << arr[i] << " ";cout << "\n";}

// sort pair by 2nd value => sorta -> ascending & sortd-> decending
bool sorta(const pair<int,int> &a,const pair<int,int> &b){return (a.second < b.second);}
bool sortd(const pair<int,int> &a,const pair<int,int> &b){return (a.second > b.second);}
// Implementation : sort(all(v),sorta); Here, v is vector of pairs

// Check
bool isPowerOfTwo(int n){return !(n & (n-1));}
bool isPerfectSquare(int x){if (x >= 0) {int sr = sqrt(x);return (sr * sr == x);}return false;}

/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = 

                    Code Start From Here                    

= = = = = = = = = = = = = = = = = = = = = = = = = = = = */

const int N = 1e7 + 10;
vector<bool> isPrime(N,1);
vector<int> lowestPrime(N), highestPrime(N);

void seive()
{
    isPrime[0] = isPrime[1] = false;
    for(int i=2; i<N; i++)
    {
        if(isPrime[i])
        {
            lowestPrime[i] = highestPrime[i] = i;
            for(int j = 2 * i; j<N; j+=i)
            {
                isPrime[j] = false;
                highestPrime[j] = i;
                if(lowestPrime[j]==0)
                    lowestPrime[j] = i;
            }
        }
    }
}

void solve()
{
    
}
   

int32_t main() {
    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    
    int test=1;
    //cin>>test;
    for(_=1; _<=test; _++)
    {
        solve();
    }
    return 0;
} 

/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = 

                    Formula                    

= = = = = = = = = = = = = = = = = = = = = = = = = = = = */

// No of divisors & Sum of divisors
// P^x * Q^y * R^z 	here, P,Q,R are prime factors & x,y,z powers
// NOD = (x+1)(y+1)(z+1)
// SOD = ((P^(x+1)-1)/(P-1)) * ((Q^(y+1)-1)/(Q-1)) * ((R^(z+1)-1)/(R-1))


// Modular Arithmatic
// (a + b) % M = ((a % M) + (b % M)) % M
// (a * b) % M = ((a % M) * (b % M)) % M
// (a - b) % M = ((a % M) - (b % M) + M) % M
// (a / b) % M = a * binExp(b, M - 2, M)  // binExp(b,M-2,M) calculates inverse of b

/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = 

                    Algorithm                    

= = = = = = = = = = = = = = = = = = = = = = = = = = = = */

// Next Greater Element

vector<int> NGE(vector<int> &v){
    vector<int> nge(v.size());
    stack<int> st;
    for(int i=0; i<v.size(); i++){
        while(!st.empty() && v[i]>v[st.top()]){
            nge[st.top()] = i;
            st.pop();
        }
        st.push(i);
    }
    while(!st.empty()){
        nge[st.top()] = -1;
        st.pop();
    }
    return nge;
}
vector<int> nge = NGE(v); // Main Function calling 


// nth root of any number using binary search

double lo = 1, hi = x, mid;
while(hi - lo > eps){ // eps = 1e-6, if want 5 digit accurate
    mid = (hi+lo)/2;
    if(multiply(mid,3) < x) lo = mid;
    else hi = mid;
}


// Subset Generation using bitmask

vector<vector<int>> subsets(vector<int> &v){
    int n = v.size();
    int subset_cnt = (1<<n);
    vector<vector<int>> subsets;
    for(int i=0; i<subset_cnt; i++){  // Here, i for mask value
        vector<int> subset;
        for(int j = 0; j<n; j++)
            if(i & (1<<j)) subset.pb(v[j]);
        subsets.pb(subset);
    } return subsets;
}


// Binary Exponentiation when a, b & mod is 1e18

int binMultiply(int a, int b, int M){
    int res = 0;
    while(b){
        if(b & 1) res = (res + a) % M;
        a = (a + a) % M;
        b >>= 1;
    }
    return res;
}
int binExp(int a, int b, int M){
    int res = 1;
    while(b){
        if(b & 1) res = binMultiply(res,a,M);
        a = binMultiply(a,a,M);
        b >>= 1;
    }
    return res;
}
binExp(50,binExp(64,32,mod-1),mod); // function calling

// phi(M) = M * multiply_of(1-1/P) here, P is all distinct prime number
// (a^b)%M = (a^(b%(M-1)))%M // ETF --> Euler Totient Function


// Prime factorization using lowest prime of seive

map<int,int> prime_factors; // first = prime factors & second = count
while(num>1){
    int prime_factor = lowestPrime[num];
    while(num % prime_factor == 0){
        num /= prime_factor;
        prime_factors[prime_factor]++;
    }
}


// Calculate all divisors upto 1e5 using seive variation

const int N = 1e5+10;
vector<int> divisors[N];
void divisorSeive(){
    for(int i = 2; i < N; i++){
        for(int j = i; j < N; j += i){
            divisors[j].pb(i);
        }
    }
}
