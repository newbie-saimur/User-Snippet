#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// #include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
// using namespace __gnu_pbds;

#define debug(x) cerr << #x<<" : "; cerr<<x<<" "; cerr << endl;
#define int     long long
#define ff      first
#define ss      second
#define all(v)      v.begin(), v.end()
#define pi          (double)(acos(-1))
#define gcd(a,b)    __gcd(a, b)
#define lcm(a,b)    (a * b) / __gcd(a, b)
#define mod         (int)(1e9+7)

#define setbit(n)      __builtin_popcountll(n)  // Count of set bit
#define zerobit(n)     __builtin_ctzll(n)       // Count of 0 bit before 1st 1
#define getbit(n,i)    ((n & (1LL << i)) != 0)  // nth bit ?
#define clearlsb(n,i)  (n & (~((1<<(i+1))-1)))  // unset upto ith bit rtl
#define clearmsb(n,i)  (n & ((1<<(i+1))-1))     // unset before ith bit ltr
#define setbit0(n,i)   (n & (~(1LL << i)))      // unset any bit
#define setbit1(n,i)   (n | (1LL << i))         // set any bit
#define togglebit(n,i) (n ^ (1LL << i))

#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))

#define case     cout<<"Case "<<_<<": "
#define sp(x,y)  fixed<<setprecision(y)<<x
#define endl     "\n"
int _;

// template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; 
// template<class T> using ordered_mset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>; 
// s.order_of_key(x) = number of elements strictly less than x
// *s.find_by_order(i) = ith element in set (0 index)

int binExp(int a,int b,int M){int res=1;while(b){if(b&1) res=(res*1LL*a)%M;a=(a*1LL*a)%M;b>>=1;}return res;}

// sort pair by 2nd value => sorta -> ascending & sortd-> decending
bool sorta(const pair<int,int> &a,const pair<int,int> &b){return (a.second < b.second);}
bool sortd(const pair<int,int> &a,const pair<int,int> &b){return (a.second > b.second);}
// Implementation : sort(all(v),sorta); Here, v is vector of pairs

// Check
bool isPowerOfTwo(int n){return !(n & (n-1));}
bool isPerfectSquare(int x){if (x >= 0) {int sr = sqrt(x);return (sr * sr == x);}return false;}

int32_t main() {
    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    
    int test=1;
    //cin>>test;
    for(_=1; _<=test; _++)
    {
        solve();
    }
    return 0;
} 

/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = 

               		     Formula                    

= = = = = = = = = = = = = = = = = = = = = = = = = = = = */

// No of divisors & Sum of divisors
// P^x * Q^y * R^z 	here, P,Q,R are prime factors & x,y,z powers
// NOD = (x+1)(y+1)(z+1)
// SOD = ((P^(x+1)-1)/(P-1)) * ((Q^(y+1)-1)/(Q-1)) * ((R^(z+1)-1)/(R-1))


// Modular Arithmatic
// (a + b) % M = ((a % M) + (b % M)) % M
// (a * b) % M = ((a % M) * (b % M)) % M
// (a - b) % M = ((a % M) - (b % M) + M) % M
// (a / b) % M = a * binExp(b, M - 2, M)  // binExp(b,M-2,M) calculates inverse of b

/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	
                		    Algorithm                    

= = = = = = = = = = = = = = = = = = = = = = = = = = = = */

// Seive
const int N = 1e7 + 10;
vector<bool> isPrime(N,1);
vector<int> lowestPrime(N), highestPrime(N);
void seive()
{
    isPrime[0] = isPrime[1] = false;
    for(int i=2; i<N; i++)
    {
        if(isPrime[i])
        {
            lowestPrime[i] = highestPrime[i] = i;
            for(int j = 2 * i; j<N; j+=i)
            {
                isPrime[j] = false; highestPrime[j] = i;
                if(lowestPrime[j]==0) lowestPrime[j] = i;
            }
        }
    }
}

// Merge Sort

void merge(int l, int r, int mid) {
    int l_sz = mid - l + 1;
    int L[l_sz + 1];
    int r_sz = r - mid;
    int R[r_sz + 1];
    for(int i=0; i<l_sz; i++) {
        L[i] = arr[i+l];
    }
    for(int i=0; i<r_sz; i++) {
        R[i] = arr[i+mid+1];
    }
    L[l_sz] = R[r_sz] = INT_MAX;
    int l_i = 0;
    int r_i = 0;
    for(int i=l; i<=r; i++) {
        if(L[l_i] <= R[r_i]) {
            arr[i] = L[l_i];
            l_i++;
        }
        else {
            arr[i] = R[r_i];
            r_i++;
        }
    }
}

void mergeSort(int l, int r) {
    if(l == r) return;
    int mid = (l+r)/2;
    mergeSort(l,mid);
    mergeSort(mid+1,r);
    merge(l,r,mid);
}

// Next Greater Element

vector<int> NGE(vector<int> &v){
    vector<int> nge(v.size());
    stack<int> st;
    for(int i=0; i<v.size(); i++){
        while(!st.empty() && v[i]>v[st.top()]){
            nge[st.top()] = i;
            st.pop();
        }
        st.push(i);
    }
    while(!st.empty()){
        nge[st.top()] = -1;
        st.pop();
    }
    return nge;
}
vector<int> nge = NGE(v); // Main Function calling 


// nth root of any number using binary search

double lo = 1, hi = x, mid;
while(hi - lo > eps){ // eps = 1e-6, if want 5 digit accurate
    mid = (hi+lo)/2;
    if(multiply(mid,3) < x) lo = mid;
    else hi = mid;
}


// Subset Generation using bitmask

vector<vector<int>> subsets(vector<int> &v){
    int n = v.size();
    int subset_cnt = (1<<n);
    vector<vector<int>> subsets;
    for(int i=0; i<subset_cnt; i++){  // Here, i for mask value
        vector<int> subset;
        for(int j = 0; j<n; j++)
            if(i & (1<<j)) subset.pb(v[j]);
        subsets.pb(subset);
    } return subsets;
}


// Binary Exponentiation when a, b & mod is 1e18

int binMultiply(int a, int b, int M){
    int res = 0;
    while(b){
        if(b & 1) res = (res + a) % M;
        a = (a + a) % M;
        b >>= 1;
    }
    return res;
}
int binExp(int a, int b, int M){
    int res = 1;
    while(b){
        if(b & 1) res = binMultiply(res,a,M);
        a = binMultiply(a,a,M);
        b >>= 1;
    }
    return res;
}
binExp(50,binExp(64,32,mod-1),mod); // function calling

// phi(M) = M * multiply_of(1-1/P) here, P is all distinct prime number
// (a^b)%M = (a^(b%(M-1)))%M // ETF --> Euler Totient Function


// Prime factorization using lowest prime of seive

map<int,int> prime_factors; // first = prime factors & second = count
while(num>1){
    int prime_factor = lowestPrime[num];
    while(num % prime_factor == 0){
        num /= prime_factor;
        prime_factors[prime_factor]++;
    }
}


// Calculate all divisors upto 1e5 using seive variation

const int N = 1e5+10;
vector<int> divisors[N];
void divisorSeive(){
    for(int i = 2; i < N; i++){
        for(int j = i; j < N; j += i){
            divisors[j].pb(i);
        }
    }
}


// Large Number MOD

bool largeNumberMod(string number,int M)   // largeNumberMod("12345",10);
{
    int now = number[0] - '0';
    for(int i = 1; i < number.length(); i++) {
        now = ((now*10) + number[i]-'0') % M;
    }

// if now ==  0 then it is possible to divide the number by  M

    if(now == 0) return true;
    else return false;
}


// Two Large Number Multiplication

string toString(int num)    
{
    if(num == 0) return "0";
    string s = "";
    while(num)
    {
        s += (num % 10) + '0';
        num/=10;
    }

    reverse(s.begin(),s.end());
    return s;
}

string multiply(string num1, string num2) //string ans = multiply("123","125");
{
    int n1 = num1.size();
    int n2 = num2.size();
    if (n1 == 0 || n2 == 0)  return "0";

    vector<int> result(n1 + n2, 0);
    int i_n1 = 0;
    int i_n2 = 0;
    for (int i=n1-1; i>=0; i--){
        int carry = 0;
        int n1 = num1[i] - '0';
        i_n2 = 0;

        for (int j=n2-1; j>=0; j--) {
            int n2 = num2[j] - '0';
            int sum = n1*n2 + result[i_n1 + i_n2] + carry;
            carry = sum/10;
            result[i_n1 + i_n2] = sum % 10;
            i_n2++;
        }
        if (carry >0)   result[i_n1 + i_n2] += carry;
        i_n1++;
    }

    int i = result.size() - 1;
    while (i>=0 && result[i] == 0)   i--;
    if (i == -1)  return "0";
    string s = "";
    while (i >= 0)
        s += toString(result[i--]);
    return s;
}


/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	
                		    Math                  

= = = = = = = = = = = = = = = = = = = = = = = = = = = = */

Equation of a line from two point ax+by=c , where
a  = y2 - y1;     b  = x1 - x2;      c = ax1 + by1

Check if the line intersects a circle if(ans <= radius)
(abs(a*x + b*y + c)/sqrt(a*a+b*b))

Area of a regular hexagon A = (3*sqrt(3)*a*a)/2;

